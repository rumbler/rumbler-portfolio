name: Continuous Deployment to Development Environment

on:
  push:
    branches:
      - "development"

permissions:
  packages: write
  contents: read
  actions: read
  checks: write  
  deployments: write

jobs:
  set-version-and-environment:
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.version.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set Version and Environment
        id: version
        run: |
          VERSION=$(git rev-parse --short HEAD)
          ENVIRONMENT="development"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  deploy-development:
    needs: set-version-and-environment
    name: Deploy to Development
    runs-on: self-hosted
    environment: development
    env:
      NODE_ENV: development
      PORT: 3001
      PRODUCTION_DOMAIN: ${{ secrets.DEV_DOMAIN }}
      DOCKER_CPU_LIMIT: 0.5
      DOCKER_MEMORY_LIMIT: 256M
      DOCKER_CPU_RESERVE: 0.25
      DOCKER_MEMORY_RESERVE: 128M
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build from Nexus
        env:
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_REPO: ${{ secrets.NEXUS_REPOSITORY }}
        run: |
          mkdir -p build
          VERSION=${{ needs.set-version-and-environment.outputs.version }}
          curl -u "${{ secrets.NEXUS_USERNAME }}:$NEXUS_PASS" \
            -o build.zip \
            "${NEXUS_URL}/repository/${NEXUS_REPO}/${{ github.event.repository.name }}/development/${VERSION}.zip"
          unzip build.zip -d build/

      - name: Build and push Docker image
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          # Login no Docker Registry
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          VERSION=${{ needs.set-version-and-environment.outputs.version }}
          docker build -t ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION} .
          docker push ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION}
          
          # Tag as development
          docker tag ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION} ${REGISTRY_URL}/${{ github.event.repository.name }}:development
          docker push ${REGISTRY_URL}/${{ github.event.repository.name }}:development

      - name: Deploy to Development
        env:
          DEV_IMAGE_TAG: ${{ needs.set-version-and-environment.outputs.version }}
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          DEV_PORT: 3001
          DEV_CPU_LIMIT: 0.5
          DEV_MEMORY_LIMIT: 256M
          DEV_CPU_RESERVE: 0.25
          DEV_MEMORY_RESERVE: 128M
          PRODUCTION_DOMAIN: ${{ secrets.DEV_DOMAIN }}
        run: |
          # Login no Docker Registry
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          # Pull new image first
          docker compose pull portfolio-development
          
          # Rolling update - zero downtime
          docker compose up -d \
            --no-deps \
            --build \
            --force-recreate \
            --remove-orphans \
            -e NODE_ENV=development \
            -e PORT=3001 \
            -e PRODUCTION_DOMAIN=$PRODUCTION_DOMAIN \
            portfolio-development
