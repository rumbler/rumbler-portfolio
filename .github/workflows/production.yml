name: Production CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        type: string
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  packages: write
  contents: read
  actions: read
  checks: write
  deployments: write

jobs:
  deploy-production:
    name: Deploy to Production
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    environment: production
    env:
      NODE_ENV: production
      PORT: 3000
      PRODUCTION_DOMAIN: ${{ secrets.PRODUCTION_DOMAIN }}
      DOCKER_CPU_LIMIT: 1
      DOCKER_MEMORY_LIMIT: 512M
      DOCKER_CPU_RESERVE: 0.75
      DOCKER_MEMORY_RESERVE: 384M
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set version and environment
        if: github.event.inputs.version == ''
        id: version
        run: |
          VERSION="${{ github.ref_name }}
          ENVIRONMENT="production"

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

      - name: Download build from Nexus
        env:
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_REPO: ${{ secrets.NEXUS_REPOSITORY }}
          REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
          NEXUS_ENV: ${{ steps.version.outputs.environment }}
          NEXUS_VERSION: ${{ steps.version.outputs.version }}
        run: |
          mkdir -p build
          curl -u "$NEXUS_USERNAME:$NEXUS_PASS" \
            -o build.zip \
            "${NEXUS_URL}/repository/${NEXUS_REPO}/${REPOSITORY_NAME}/${NEXUS_ENV}/${NEXUS_VERSION}.zip"
            
            if [ ! -f build.zip ]; then
              echo "Error: Build file not downloaded"
              exit 1
            fi

          unzip build.zip -d build/

      - name: Build and push Docker image
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
          NEXUS_ENV: ${{ steps.version.outputs.environment }}
          NEXUS_VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Login no Docker Registry
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          docker build -t ${REGISTRY_URL}/${REPOSITORY_NAME}:${NEXUS_VERSION} .
          docker push ${REGISTRY_URL}/${REPOSITORY_NAME}:${NEXUS_VERSION}
          
          # Tag as latest
          docker tag ${REGISTRY_URL}/${REPOSITORY_NAME}:${NEXUS_VERSION} ${REGISTRY_URL}/${REPOSITORY_NAME}:latest
          docker push ${REGISTRY_URL}/${REPOSITORY_NAME}:latest

      - name: Deploy to Production
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          PROD_IMAGE_TAG: ${{ steps.version.outputs.version }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          PROD_PORT: 3000
          PROD_CPU_LIMIT: 1.0
          PROD_MEMORY_LIMIT: 512M
          PROD_CPU_RESERVE: 0.75
          PROD_MEMORY_RESERVE: 384M
          PRODUCTION_DOMAIN: ${{ secrets.PRODUCTION_DOMAIN }}
        run: |
          echo "Logging into Docker Registry..."
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          echo "Pulling the latest production image..."
          docker compose pull portfolio-production
          
          echo "Deploying the updated production container..."
          docker compose up -d \
            --no-deps \
            --remove-orphans \
            portfolio-production
