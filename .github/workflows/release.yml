name: Release CD

on:
<<<<<<< HEAD
=======
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string
>>>>>>> 806f52d (fix: update CD workflows to run on push)
  push:
    branches:
      - "main"

permissions:
  packages: write
  contents: read
  actions: read
  checks: write
  deployments: write

jobs:
  deploy-release:
    name: Deploy to Release
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    environment: release
    env:
      NODE_ENV: release
      PORT: 3002
      DOCKER_CPU_LIMIT: 0.75
      DOCKER_MEMORY_LIMIT: 384M
      DOCKER_CPU_RESERVE: 0.5
      DOCKER_MEMORY_RESERVE: 256M
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release version
        id: get_version
        run: |
          # Pega o SHA do commit
          COMMIT_SHA=${{ github.sha }}
          # Cria uma tag temporÃ¡ria no formato rc-{7 primeiros caracteres do SHA}
          VERSION="rc-${COMMIT_SHA:0:7}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download build from Nexus
        env:
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_REPO: ${{ secrets.NEXUS_REPOSITORY }}
        run: |
          mkdir -p build
          VERSION=${{ steps.get_version.outputs.version }}
          curl -u "${{ secrets.NEXUS_USERNAME }}:$NEXUS_PASS" \
            -o build.zip \
            "${NEXUS_URL}/repository/${NEXUS_REPO}/${{ github.event.repository.name }}/release/${VERSION}.zip"
          unzip build.zip -d build/

      - name: Build and push Docker image
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          # Login no Docker Registry
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          VERSION=${{ steps.get_version.outputs.version }}
          docker build -t ${REGISTRY_URL}/rumbler-portfolio:${VERSION} .
          docker push ${REGISTRY_URL}/rumbler-portfolio:${VERSION}
          
          # Tag as release
          docker tag ${REGISTRY_URL}/rumbler-portfolio:${VERSION} ${REGISTRY_URL}/rumbler-portfolio:release
          docker push ${REGISTRY_URL}/rumbler-portfolio:release

      - name: Deploy to Release
        env:
          RELEASE_IMAGE_TAG: ${{ steps.get_version.outputs.version }}
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          RELEASE_PORT: 3002
          RELEASE_CPU_LIMIT: 0.75
          RELEASE_MEMORY_LIMIT: 384M
          RELEASE_CPU_RESERVE: 0.5
          RELEASE_MEMORY_RESERVE: 256M
        run: |
          # Login no Docker Registry
          echo "$NEXUS_PASS" | docker login $REGISTRY_URL -u "$NEXUS_USERNAME" --password-stdin
          
          # Pull new image first
          docker compose pull portfolio-release
          
          # Rolling update - zero downtime
          docker compose up -d --no-deps --build --force-recreate --remove-orphans portfolio-release
