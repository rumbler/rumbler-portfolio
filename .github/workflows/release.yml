name: Release CD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string
  pull_request_target:
    types: [closed]
    branches:
      - "main"

permissions:
  packages: write
  contents: read
  actions: read
  checks: write
  deployments: write

jobs:
  deploy-release:
    name: Deploy to Release
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    environment: release
    env:
      NODE_ENV: release
      PORT: 3002
      DOCKER_CPU_LIMIT: 0.75
      DOCKER_MEMORY_LIMIT: 384M
      DOCKER_CPU_RESERVE: 0.5
      DOCKER_MEMORY_RESERVE: 256M
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from commit
        if: github.event.inputs.version == ''
        id: get_version
        run: |
          COMMIT_SHA=${{ github.sha }}
          VERSION="${COMMIT_SHA:0:7}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        run: |
          VERSION=${{ github.event.inputs.version || steps.get_version.outputs.version }}
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Download build from Nexus
        env:
          NEXUS_PASS: ${{ secrets.NEXUS_PASSWORD }}
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_REPO: ${{ secrets.NEXUS_REPOSITORY }}
        run: |
          mkdir -p build
          VERSION=${{ github.event.inputs.version || steps.get_version.outputs.version }}
          curl -u "${{ secrets.NEXUS_USERNAME }}:$NEXUS_PASS" \
            -o build.zip \
            "${NEXUS_URL}/repository/${NEXUS_REPO}/${{ github.event.repository.name }}/release/${VERSION}.zip"
          unzip build.zip -d build/

      - name: Build and push Docker image
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        run: |
          VERSION=${{ github.event.inputs.version || steps.get_version.outputs.version }}
          docker build -t ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION}-rc .
          docker push ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION}-rc
          
          # Tag as release
          docker tag ${REGISTRY_URL}/${{ github.event.repository.name }}:${VERSION}-rc ${REGISTRY_URL}/${{ github.event.repository.name }}:release
          docker push ${REGISTRY_URL}/${{ github.event.repository.name }}:release

      - name: Deploy to Release
        env:
          IMAGE_TAG: ${{ github.event.inputs.version || steps.get_version.outputs.version }}
        run: |
          # Pull new image first
          docker compose -f docker-compose.yml -f docker-compose.release.yml pull
          
          # Rolling update - zero downtime
          docker compose -f docker-compose.yml -f docker-compose.release.yml up -d --no-deps --build --force-recreate --remove-orphans
