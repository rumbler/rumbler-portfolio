name: Cleanup Nexus Artifacts

on:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight
  workflow_dispatch:      # Allow manual trigger

env:
  NEXUS_API: "https://pkg.rumblersoppa.com.br/service/rest"
  RAW_REPO: "raw-hosted"
  DOCKER_REPO: "docker-hosted"
  RETENTION_DAYS_DEV: 7      # Keep development artifacts for 7 days
  RETENTION_DAYS_RC: 30      # Keep RC artifacts for 30 days
  KEEP_LAST_DEV: 10         # Keep last 10 development artifacts
  KEEP_LAST_RC: 5           # Keep last 5 RC artifacts
  KEEP_LAST_RELEASES: 5     # Keep last 5 stable releases

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Create cleanup script
        run: |
          cat > cleanup.py << 'EOL'
          import os
          import requests
          from datetime import datetime, timedelta
          import json

          NEXUS_API = os.environ['NEXUS_API']
          RAW_REPO = os.environ['RAW_REPO']
          DOCKER_REPO = os.environ['DOCKER_REPO']
          AUTH = (os.environ['NEXUS_USERNAME'], os.environ['NEXUS_PASSWORD'])

          def get_components(repository):
              url = f"{NEXUS_API}/v1/components?repository={repository}"
              response = requests.get(url, auth=AUTH)
              return response.json()['items']

          def delete_component(repository, component_id):
              url = f"{NEXUS_API}/v1/components/{component_id}"
              response = requests.delete(url, auth=AUTH)
              return response.status_code == 204

          def cleanup_artifacts():
              # Get all components
              raw_components = get_components(RAW_REPO)
              
              # Separate by type
              dev_artifacts = []
              rc_artifacts = []
              release_artifacts = []
              
              for comp in raw_components:
                  name = comp['name']
                  if '-rc.' in name:
                      rc_artifacts.append(comp)
                  elif name.startswith('v'):
                      release_artifacts.append(comp)
                  else:
                      dev_artifacts.append(comp)
              
              # Sort by last updated
              dev_artifacts.sort(key=lambda x: x['lastUpdated'], reverse=True)
              rc_artifacts.sort(key=lambda x: x['lastUpdated'], reverse=True)
              release_artifacts.sort(key=lambda x: x['lastUpdated'], reverse=True)
              
              # Keep recent development artifacts
              to_delete = dev_artifacts[int(os.environ['KEEP_LAST_DEV']):]
              cutoff_date = datetime.now() - timedelta(days=int(os.environ['RETENTION_DAYS_DEV']))
              for artifact in to_delete:
                  last_updated = datetime.fromisoformat(artifact['lastUpdated'].replace('Z', '+00:00'))
                  if last_updated < cutoff_date:
                      print(f"Deleting development artifact: {artifact['name']}")
                      delete_component(RAW_REPO, artifact['id'])
              
              # Keep recent RC artifacts
              to_delete = rc_artifacts[int(os.environ['KEEP_LAST_RC']):]
              cutoff_date = datetime.now() - timedelta(days=int(os.environ['RETENTION_DAYS_RC']))
              for artifact in to_delete:
                  last_updated = datetime.fromisoformat(artifact['lastUpdated'].replace('Z', '+00:00'))
                  if last_updated < cutoff_date:
                      print(f"Deleting RC artifact: {artifact['name']}")
                      delete_component(RAW_REPO, artifact['id'])
              
              # Keep recent releases
              to_delete = release_artifacts[int(os.environ['KEEP_LAST_RELEASES']):]
              for artifact in to_delete:
                  print(f"Deleting old release: {artifact['name']}")
                  delete_component(RAW_REPO, artifact['id'])

          if __name__ == '__main__':
              cleanup_artifacts()
          EOL

      - name: Run cleanup
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: python cleanup.py
